You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]


SOLUTION:

# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        # перенос разряда
        first, next_elem, _next = None, None, False
        while l1 is not None or l2 is not None:
            current_result = _next
            if l1: 
                current_result += l1.val
                l1 = l1.next
            if l2: 
                current_result += l2.val
                l2 = l2.next
            buf = ListNode(val=current_result % 10)
            if not next_elem:
                first = next_elem = buf
            else:
                next_elem.next = buf
                next_elem = buf
            _next = True if (current_result >= 10) else False
        if _next:
            next_elem.next = ListNode(val=1)
        return first



29 ms
16.3 MB
